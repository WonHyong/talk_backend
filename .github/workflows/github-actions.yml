name: CI-CD

# Event trigger
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:
    name: Build Maven
    runs-on: ubuntu-latest
    steps:

      # Check out
      - name: Checkout
        uses: actions/checkout@v4

      # JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Caching dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Source Environment variables
      - name: Set Environment variables
        run: |
          echo "${{ secrets.ENVIRONMENT_VARS }}" >> .env
          export $(grep -v '^#' .env | xargs -d '\n')
        shell: bash

      # MAVEN
      - name: Build with Maven
        run: mvn -B package --file talk/pom.xml

  docker-hub:
    runs-on: ubuntu-latest
    name: Docker image push
    needs: [ build ]
    steps:

      # Check out
      - name: Checkout
        uses: actions/checkout@v4

      # Docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Docker build & push to hub
        uses: docker/build-push-action@v5
        with:
          context: ./talk
          push: ${{ github.event_name == 'push' }}
          tags: ${{ secrets.DOCKER_REPO }}/lotalk:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: self-hosted
    name: Deploy
    needs: [ docker-hub ]
    steps:
      # Deploy
      - name: Deploy to ec2
        if: github.event_name == 'push'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker container prune -f
            sudo docker pull ${{ secrets.DOCKER_REPO }}/lotalk
            
            # Environment variables
            echo "${{ secrets.ENVIRONMENT_VARS }}" >| .env
            export $(grep -v '^#' .env | xargs -d '\n')
            
            # docker-compose.yml
            curl -L -O https://raw.githubusercontent.com/WonHyong/talk_backend/main/docker-compose.yml
            
            docker-compose up -d --build
            docker image prune -f
            
            ERROR_COUNT=$(docker-compose logs | grep -c ERROR)
            
            if [ $ERROR_COUNT -gt 0 ]; then
              echo "Found $ERROR_COUNT error(s) in container logs."
              exit 1
            fi

  notify:
    name: Discord Notification
    runs-on: ubuntu-latest
    needs:
      - build
      - docker-hub
      - deploy
    if: ${{ always() }}
    steps:
      - name: Check actions's conditions
        uses: haya14busa/action-cond@v1
        id: action_condition
        with:
          cond: ${{ contains(needs.*.result, 'failure') }}
          if_true: "Failure"
          if_false: "Success"
      - name: Discord Notify
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: ${{ github.event_name }}
          status: ${{ steps.action_condition.outputs.value }}
